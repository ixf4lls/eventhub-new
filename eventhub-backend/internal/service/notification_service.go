package service

import (
	"errors"
	"eventhub-backend/internal/domain"
	"eventhub-backend/internal/repository"
	"fmt"
	"time"
)

type NotificationService struct {
	notificationRepo repository.GormNotificationRepository
	eventRepo        repository.GormEventRepository
}

func NewNotificationService(notificationRepo repository.GormNotificationRepository, eventRepo repository.GormEventRepository) *NotificationService {
	return &NotificationService{notificationRepo: notificationRepo, eventRepo: eventRepo}
}

func (s *NotificationService) Create(userID, eventID uint, msgType string) error {
	if msgType != "reminder_1d" && msgType != "reminder_1h" && msgType != "cancel" && msgType != "reschedule" {
		return errors.New("incorrect msg type")
	}

	exists, err := s.eventRepo.IsEventExist(eventID)
	if err != nil {
		return nil
	}

	if !exists {
		return errors.New("event do not exists")
	}

	return s.notificationRepo.Create(userID, eventID, msgType)
}

func (s *NotificationService) GetAll(userID uint) ([]domain.Notification, error) {
	notifications, err := s.notificationRepo.GetAll(userID)

	if err != nil {
		return nil, err
	}

	var notificationsResponse []domain.Notification
	for _, ntf := range notifications {
		event, _, err := s.eventRepo.GetByID(ntf.EventID, ntf.UserID)
		if err != nil {
			continue
		}

		parsedDate, err := time.Parse("2006-01-02", event.Date)
		if err != nil {
			continue
		}
		parsedTime, err := time.Parse("15:04:05", event.StartTime)
		if err != nil {
			continue
		}
		eventDateTime := time.Date(
			parsedDate.Year(), parsedDate.Month(), parsedDate.Day(),
			parsedTime.Hour(), parsedTime.Minute(), 0, 0, time.Local,
		)
		months := []string{
			"—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
			"–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è",
		}
		formatted := fmt.Sprintf("%d %s, %02d:%02d",
			eventDateTime.Day(),
			months[eventDateTime.Month()-1],
			eventDateTime.Hour(),
			eventDateTime.Minute(),
		)

		var message, info string
		switch ntf.Type {
		case "reminder_1d":
			message = fmt.Sprintf("ü•≥ ¬´%s¬ª —É–∂–µ –∑–∞–≤—Ç—Ä–∞!", event.Title)
			info = "–î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏! –ì–æ—Ç–æ–≤—å—Å—è, –±—É–¥–µ—Ç –∫–ª–∞—Å—Å–Ω–æ!"
		case "reminder_1h":
			message = fmt.Sprintf("ü•≥ ¬´%s¬ª —É–∂–µ —á–µ—Ä–µ–∑ —á–∞—Å!", event.Title)
			info = "–î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏! –ì–æ—Ç–æ–≤—å—Å—è, –±—É–¥–µ—Ç –∫–ª–∞—Å—Å–Ω–æ!"
		case "cancel":
			message = fmt.Sprintf("üòî –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ ¬´%s¬ª –æ—Ç–º–µ–Ω–µ–Ω–æ", event.Title)
			info = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç—Å—è. –ù–∞–¥–µ–µ–º—Å—è —É–≤–∏–¥–µ—Ç—å —Ç–µ–±—è –Ω–∞ –¥—Ä—É–≥–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö!"
		case "reschedule":
			message = fmt.Sprintf("‚ùó –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ ¬´%s¬ª –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ", event.Title)
			info = fmt.Sprintf("–ù–æ–≤–æ–µ –≤—Ä–µ–º—è: %s. –ú—ã –∂–¥–µ–º —Ç–µ–±—è!", formatted)
		default:
			continue
		}

		notificationsResponse = append(notificationsResponse, domain.Notification{
			Message: message,
			Info:    info,
		})
	}

	return notificationsResponse, nil
}
